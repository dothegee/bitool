# ==============================
# 🏷️ 시스템 기본 설정
# ==============================

# 이 애플리케이션의 이름을 정의합니다.
# 로그나 Actuator, Swagger 문서 등에서 식별자처럼 사용됩니다.
spring.application.name=bitool

# Swagger UI 문서 접속 경로 설정
# 예: http://localhost:8080/docs 에서 API 문서를 확인할 수 있게 합니다.
springdoc.swagger-ui.path=/docs

# 스케줄러 기능 활성화 여부를 설정합니다.
# true일 경우 @Scheduled가 붙은 메서드가 자동 실행됩니다.
scheduler.enabled=true

# ==============================
# 🛠️ PostgreSQL (Docker 환경 변수 기반)
# ==============================

# 데이터베이스 연결 URL을 외부 환경변수에서 받아옵니다.
# 예: jdbc:postgresql://db:5432/bitool
spring.datasource.url=${SPRING_DATASOURCE_URL}

# DB 접속 계정명 (환경변수에서 주입)
spring.datasource.username=${SPRING_DATASOURCE_USERNAME}

# DB 접속 비밀번호 (환경변수에서 주입)
spring.datasource.password=${SPRING_DATASOURCE_PASSWORD}

# JDBC 드라이버 클래스명 - PostgreSQL을 위한 표준 설정
spring.datasource.driver-class-name=org.postgresql.Driver

# ==============================
# 📦 JPA 설정 (ORM - 객체/테이블 매핑)
# ==============================

# 데이터베이스 테이블 자동 생성 정책
# - update: 엔티티와 DB 스키마를 비교해서 자동으로 ALTER
# - create: 기존 테이블을 삭제하고 새로 생성
# - none: 아무 동작 안 함 (운영환경에서 추천)
spring.jpa.hibernate.ddl-auto=update

# 실행되는 SQL 쿼리를 콘솔에 출력할지 여부
spring.jpa.show-sql=true

# SQL 쿼리를 사람이 읽기 쉽게 정렬해서 출력
spring.jpa.properties.hibernate.format_sql=true

# 사용하는 DB가 PostgreSQL임을 명시 (Hibernate의 SQL 방언 설정)
spring.jpa.database-platform=org.hibernate.dialect.PostgreSQLDialect

# ==============================
# 📋 Logging 설정
# ==============================

# 전체 로그 레벨 (INFO는 일반적인 정보 메시지까지 출력)
logging.level.root=INFO

# 특정 패키지의 로그 레벨 (com.jinu.bitool 하위 패키지는 DEBUG까지 출력)
# → 서비스 내부 로직의 디버깅에 유용
logging.level.com.jinu.bitool=DEBUG

# 로그 파일 저장 위치 지정
# logs/bitool.log 파일에 로그가 저장됩니다 (상대 경로 기준)
logging.file.name=logs/bitool.log

# 💡 필요 시 콘솔/파일 출력 형식도 커스터마이징 가능:
# logging.pattern.console=
# logging.pattern.file=
